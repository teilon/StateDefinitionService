//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace StateDefinitionService.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbEntities : DbContext
    {
        public dbEntities()
            : base("name=dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<vZones> vZones { get; set; }
    
        public virtual ObjectResult<spGetDumps_Result> spGetDumps()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDumps_Result>("spGetDumps");
        }
    
        public virtual int spSaveEndEventForTransporter(string transporterimei, Nullable<int> eventIndex, Nullable<System.DateTime> endTime)
        {
            var transporterimeiParameter = transporterimei != null ?
                new ObjectParameter("transporterimei", transporterimei) :
                new ObjectParameter("transporterimei", typeof(string));
    
            var eventIndexParameter = eventIndex.HasValue ?
                new ObjectParameter("eventIndex", eventIndex) :
                new ObjectParameter("eventIndex", typeof(int));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveEndEventForTransporter", transporterimeiParameter, eventIndexParameter, endTimeParameter);
        }
    
        public virtual int spSaveStartEventForLoader(string transporterimei, string loaderimei, Nullable<int> eventIndex)
        {
            var transporterimeiParameter = transporterimei != null ?
                new ObjectParameter("transporterimei", transporterimei) :
                new ObjectParameter("transporterimei", typeof(string));
    
            var loaderimeiParameter = loaderimei != null ?
                new ObjectParameter("loaderimei", loaderimei) :
                new ObjectParameter("loaderimei", typeof(string));
    
            var eventIndexParameter = eventIndex.HasValue ?
                new ObjectParameter("eventIndex", eventIndex) :
                new ObjectParameter("eventIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveStartEventForLoader", transporterimeiParameter, loaderimeiParameter, eventIndexParameter);
        }
    
        public virtual int spSaveStartEventForTransporter(string transporterimei, Nullable<int> eventIndex, Nullable<System.DateTime> starttime)
        {
            var transporterimeiParameter = transporterimei != null ?
                new ObjectParameter("transporterimei", transporterimei) :
                new ObjectParameter("transporterimei", typeof(string));
    
            var eventIndexParameter = eventIndex.HasValue ?
                new ObjectParameter("eventIndex", eventIndex) :
                new ObjectParameter("eventIndex", typeof(int));
    
            var starttimeParameter = starttime.HasValue ?
                new ObjectParameter("starttime", starttime) :
                new ObjectParameter("starttime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveStartEventForTransporter", transporterimeiParameter, eventIndexParameter, starttimeParameter);
        }
    
        public virtual int spSaveTotbEventData(string imei, Nullable<long> timestamp, Nullable<int> statusCode, Nullable<double> latitude, Nullable<double> longitude, Nullable<double> altitude, Nullable<double> heading, Nullable<double> speedKPH, Nullable<long> creationTime)
        {
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(long));
    
            var statusCodeParameter = statusCode.HasValue ?
                new ObjectParameter("statusCode", statusCode) :
                new ObjectParameter("statusCode", typeof(int));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(double));
    
            var altitudeParameter = altitude.HasValue ?
                new ObjectParameter("altitude", altitude) :
                new ObjectParameter("altitude", typeof(double));
    
            var headingParameter = heading.HasValue ?
                new ObjectParameter("heading", heading) :
                new ObjectParameter("heading", typeof(double));
    
            var speedKPHParameter = speedKPH.HasValue ?
                new ObjectParameter("speedKPH", speedKPH) :
                new ObjectParameter("speedKPH", typeof(double));
    
            var creationTimeParameter = creationTime.HasValue ?
                new ObjectParameter("creationTime", creationTime) :
                new ObjectParameter("creationTime", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spSaveTotbEventData", imeiParameter, timestampParameter, statusCodeParameter, latitudeParameter, longitudeParameter, altitudeParameter, headingParameter, speedKPHParameter, creationTimeParameter);
        }
    }
}
